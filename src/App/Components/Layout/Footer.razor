@using System.Text
@inject TimeProvider Time
@inject IDialogService DialogService
@inject IJSRuntime JS

<FluentDivider Role="DividerRole.Presentation" class="footer-divider" />

<footer id="footer">
    <FluentStack VerticalAlignment="VerticalAlignment.Center" Wrap class="profile-footer">
        <FluentStack Width="20">
            @foreach (var social in _socials)
            {
                <FluentAnchor Href="@social.UserHref" Appearance="Appearance.Stealth" Rel="noopener noreferrer"
                    Target="_blank" aria-label="@social.Name" class="social-anchor">
                    <FluentIcon Value="@social.Icon" Color="Color.Neutral" />
                </FluentAnchor>
            }

            <FluentButton OnClick="@ShowAboutDialogAsync" Appearance="Appearance.Stealth" class="social-anchor">
                <FluentIcon Value="@(new Icons.Filled.Size28.Info())" Color="Color.Neutral" />
            </FluentButton>

        </FluentStack>

        <FluentSpacer />

        <span class="copyright">
            Â© Victor Frye @Time.GetLocalNow().Year
        </span>
    </FluentStack>
</footer>

@code {

    internal async Task ShowAboutDialogAsync()
    {
        var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
           {
                Content = new()
                {
                    Title = "Thanks for visiting!",
                    MarkupMessage = new MarkupString(GetAboutDialogMessage()),
                    Intent = MessageBoxIntent.Info
                },
                PrimaryAction = "Visit GitHub",
                SecondaryAction = "Close",

                Width = "600px",
            });

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await JS.InvokeVoidAsync("open", SocialMedia.GitHub.UserHref, "_blank");
        }   
    }

    internal string GetAboutDialogMessage()
    {
        var message = new StringBuilder();

        message.AppendLine("<p>Microsoft Graveyard is the virtual graveyard for all products killed by Microsoft; a free and open source collection of dead Microsoft products built by a passionate and nostalgic community. Our objective as a community is to provide factual, historic information for the products listed here.</p>");

        message.AppendLine("<p>If something is missing, inaccurate, or you have a suggestion, <strong>visit and contribute to the project on GitHub.</strong></p>");

        message.AppendLine("<p>This project is NOT affiliated with Microsoft in any way. All product names, logos, and brands are property of their respective owners.</p>");

        return message.ToString();
    }

    private IEnumerable<Social> _socials { get; init; } = Data.SocialMedia.All;
}
